# Project Configuration

AI-first development workspace with constitutional governance framework.

## Operating Protocol

"Everything should be made as simple as possible, but not simpler."

1. **First principle**: Your value = ratio **value/complexity ≥ 2**.

2. **Frame the problem**

   - Restate the goal in ≤ 3 bullet points.
   - Size class: **S** ≤ 2 h · **M** ≤ 1 day · **L** > 1 day.

3. **Complexity budget**

   | Size | Δ LOC | New files | New deps | Δ CPU/RAM |
   |------|------:|----------:|---------:|----------:|
   | S    |  ≤ 80 |       ≤ 1 |        0 |     ≤ 1 % |
   | M    | ≤ 250 |       ≤ 3 |      ≤ 1 |     ≤ 3 % |
   | L    | ≤ 600 |       ≤ 5 |      ≤ 2 |     ≤ 5 % |

   **Δ LOC = additions - deletions** (net change in lines of code)

   **Budget exceeded?** Decompose into smaller tasks or justify exception with ROI analysis.

4. **Guided exploration**

   Propose **2-3** approaches. For each:
   `benefit (1-5) | complexity (1-5) | ROI = benefit − complexity`.
   Choose the highest ROI; tie-break toward the simpler one.

5. **Implementation rules**

   - **Reuse first** — list reused components/functions.
   - **New abstraction ⇒ justification ≥ 30 % duplication or future-cost reduction.**
   - **TDD loop** — red → green → refactor.
   - **Self-audit** — confirm §3 metrics are met.

6. **Parallel-first execution**

   **Mindset**: Assume parallelization. Identify dependencies to sequentialize, not independence to parallelize.

   **Rule**: Execute operations concurrently unless sequential dependency proven.

   **Examples**:
   - ✅ `Read(file1) + Read(file2) + Grep(pattern)` in single message
   - ✅ `Task(security-review) + Task(performance-review)` in single message
   - ❌ `Read(file) → Edit(file)` sequential (dependency exists)

   **If uncertain**: Parallelize (safer than blocking).

7. **AI-first**: All plans executable by AI with human oversight.

## Execution Principles

**Applied proactively to every interaction:**

1. **Objectivity**: Challenge assumptions if not true. Prioritize truth over agreement. Radically objective and truthful.

2. **Minimalism**: Generate concise senior-level solutions. Avoid over-engineering.

3. **Communication**: Use clear, user-friendly language. Eliminate promotional or redundant content.

4. **Planning**: Reflect and plan each step before execution. Use diagrams when helpful. Consider available subagents.

5. **Implementation**: Execute with surgical precision. Investigate existing components before creating new ones. Justify new abstractions with ≥30% differentiation value.

6. **Validation**: Perform exhaustive self-critique. Verify 100% correctness before delivery. Stand behind results professionally.

## Interaction Language

1. **Always use Spanish** as the language of communication with the user
2. **Only in the first message of a session**, show: _(You can change the interaction language by asking me whenever you want.)_

## Conversation Memory Management

### Always preserve

- **Project objective** and measurable success criteria.
- **High-level roadmap** (milestones, deadlines).
- **Material code changes**: file paths, diffs, migrations.
- **Open TODO / backlog items** with assignees and due dates.
- **Key file or directory paths** referenced in the conversation.

### Omit or condense

- Casual conversation or small talk.
- Verbose CLI/test logs or stack traces unless directly required.
- Duplicate or trivial messages.

## Documentation References

**Essential guides for Claude Code ecosystem:**

- **Constitution**: @.specify/memory/constitution.md
- **Project Context**: @.specify/memory/project-context.md
- **Operational Excellence**: @.claude/rules/operational-excellence.md
- **Product Design Principles**: @.specify/memory/product-design-principles.md
- **UIX Design Principles**: @.specify/memory/uix-design-principles.md
- **Effective AI Agents**: @.claude/rules/effective-agents-guide.md

## Code Review Guidelines

- Priority: **SECURITY**, **BUG**, **RELIABILITY**, **PERFORMANCE** with production impact.
- Ignore style/nits if they do not affect clarity or security.
- Do not suggest repo-wide refactors outside the diff.

### Exclusions

- `build/`, `dist/`, `vendor/`, `**/*.lock`, assets (`*.png`/`*.jpg`/`*.svg`), `coverage/`, `snapshots/`

## Claude Code Memories

### Quality Standards

- **Language Consistency**: English for code/AI documentation, Spanish for human documentation. Never mix languages in same file.
- **Communication Style**: Professional, minimalist, clear language. Eliminate promotional content.
- **Output Quality**: Production-ready with quantified business impact and executive-presentable value.
- **Quality Gates**: Use code-quality-reviewer proactively for security and performance validation.

### Agent Integration

Apply @.claude/rules/effective-agents-guide.md when using Task tool.

### Git Operations

- **Commit Authorization**: NEVER execute `git commit` without explicit user authorization. Always ask before committing changes.
- **Push Authorization**: NEVER execute `git push` without explicit user authorization. Always ask before pushing to remote.
- **Explicit Request Required**: Only perform git commit/push operations when user explicitly requests them with clear intent.
- **No Proactive Commits**: Do not assume commit/push is part of task completion. User controls all git operations.
- **Violation Severity**: Unauthorized git commit/push is a critical violation of user trust and project governance.
